{"version":3,"file":"dynamic-component.service.d.ts","sources":["dynamic-component.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * Insert a component dynamically using a service\r\n *\r\n * ### Example\r\n * ```ts\r\n * import { DynamicComponentService } from './dynamic.component.service';\r\n * import { MyDynamicComponent } from './my-1.component';\r\n *\r\n * @Component({\r\n *   template: ` ... <div #dymamic></div>`\r\n * })\r\n * export class MyComponent {\r\n *   @ViewChild('dynamic', {read:ViewContainerRef}) vcr: ViewContainerRef;\r\n *\r\n *   constructor(public dcs: DynamicComponentService) {}\r\n *\r\n *   insertComp() {\r\n *     let compRef = this.dcs.createComponent(MyDynamicComponent, this.vcr);\r\n *     ths.dcs.insertComonent(cmpRef);\r\n *     compRef.instance.items = [1,2,3];              // dealing with @input\r\n *     compRef.instance.output$.subscribe(val => {}); // dealing with @output\r\n *   }\r\n * }\r\n * ```\r\n */\r\nimport { Component, ComponentFactoryResolver, ComponentRef, ViewContainerRef } from '@angular/core';\r\n/**\r\n * Provide service to add or remove component dynamically\r\n */\r\nexport declare class DynamicComponentService {\r\n    /** used to create a factory from a component class */\r\n    factoryResolver: ComponentFactoryResolver;\r\n    /** defines where a dynamic components insert into */\r\n    rootViewContainer: ViewContainerRef;\r\n    constructor(factoryResolver: any);\r\n    /**\r\n     * returns component reference\r\n     * The reason to seperate `createCompnent` and `insertComponent` is\r\n     * to allow some actions before we insert into a hostView.\r\n     * e.g styling, setting attributes, etc\r\n     */\r\n    createComponent(component: any, into?: ViewContainerRef): ComponentRef<any>;\r\n    /**\r\n     * insert component\r\n     */\r\n    insertComponent(componentRef: ComponentRef<any>): Component;\r\n}\r\n"]}