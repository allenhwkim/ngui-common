{"version":3,"file":"ngui-virtual-list.component.d.ts","sources":["ngui-virtual-list.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, ComponentRef, ElementRef, EventEmitter, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { DynamicComponentService } from '../../ngui-utils/src/dynamic-component.service';\r\nimport { NguiInviewPageComponent } from './ngui-inview-page.component';\r\n/**\r\n * Virtual List\r\n *\r\n * The `<ngui-inview ..>` inserts <ngui-inview-page> into\r\n * `<div #pages>` when it is in viewport\r\n * When it's inserted, it will be pushed down, which makes it out of viewport.\r\n * User scrolls down to see the bottom of the list,\r\n * then it will insert another `<ngui-inview-page>` again.\r\n *\r\n * <ngui-inview-page> listens to (nguiInview) and (nguiOutview) events,\r\n * when <ngui-inview-page> is out of view port, it empties out the contents.\r\n * and it restores back the contents when it is in viewport again.\r\n\r\n ### Example\r\n ```html\r\n <ngui-virtual-list (bottomInview)=\"loadItems($event)\">\r\n   <ng-template let-items=\"items\">\r\n     <div *ngIf=\"!items\">Loading</div>\r\n     <li *ngFor=\"let num of items; trackBy: num\">row number: {{ num }}</li>\r\n   </ng-template>\r\n </ngui-virtual-list>\r\n ```\r\n */\r\nexport declare class NguiVirtualListComponent implements AfterViewInit {\r\n    renderer: Renderer2;\r\n    element: ElementRef;\r\n    dynamicComponentService: DynamicComponentService;\r\n    cdr: ChangeDetectorRef;\r\n    /** the container NguiInviewPage will be inserted */\r\n    pagesRef: ViewContainerRef;\r\n    /** Template of NguiInviewPage. Allow users to define their own template  */\r\n    template: TemplateRef<any>;\r\n    /** Fired when child `<ngui-list-item>` is selected */\r\n    selected: EventEmitter<any>;\r\n    /** Fired when `ESC` key is pressed from `<ngui-list-item>` */\r\n    escaped: EventEmitter<any>;\r\n    /**\r\n     * Event fired when bottom of the virtual list is in view\r\n     * The handler of this event must call `$event.addItems(items: Array<any>)` to fill contents\r\n     * If not, only the first page is loaded, and rest of the pages won't be loaded;\r\n  \r\n     ### Example\r\n     ```html\r\n     <ngui-virtual-list (bottomInview)=\"loadItems($event)\">\r\n       <ng-template let-items=\"items\">\r\n         <div *ngIf=\"items else noItems\">\r\n            <li *ngFor=\"let num of items; trackBy: num\">row number: {{ num }}</li>\r\n         </div>\r\n         <ng-template #noItems>Loading</ng-template>\r\n       </ng-template>\r\n     </ngui-virtual-list>\r\n     ```\r\n     */\r\n    bottomInview: EventEmitter<any>;\r\n    /** The last NguiInviewPageComponent being inserted */\r\n    inviewPage: ComponentRef<NguiInviewPageComponent>;\r\n    _focused: boolean;\r\n    /** Indicates if a page is still loading */\r\n    isListLoading: boolean;\r\n    inviewPages: Array<ComponentRef<NguiInviewPageComponent>>;\r\n    constructor(renderer: Renderer2, element: ElementRef, dynamicComponentService: DynamicComponentService, cdr: ChangeDetectorRef);\r\n    /** Check if necessary input and output is provided */\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * When the bottom is inview port, this function is called\r\n     * It will insert a dynamicall created NguiInviewPageComponent with the given template.\r\n     * It will also fires (bottomInview) event, so that user can fill up items for the page.\r\n     */\r\n    addAnInviewPageToPages(): void;\r\n    addList(items: Array<any>): void;\r\n}\r\n"]}